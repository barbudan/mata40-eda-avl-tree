//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////*MATA40 - ESTRUTURA DE DADOS E ALGORITMOS I - 2017.2*////////////////////////////////
////////////////////////////////*ALUNO: DANILO DE ANDRADE PELETEIRO*//////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef AVL_H_
#define AVL_H_

typedef struct TREE arvore;

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// FUNÇÕES DE CRIAÇÃO DE NÓS ////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

arvore* avl_create(); // Cria a Árvore
void avl_push(arvore **AVL, arvore *avl, int cod_client, int operation, long long int value);
 // Insere nó e Rebalanceia (se necessário) a Árvore

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// FUNÇÕES DE REMOÇÃO DE NÓS ////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void avl_remove(arvore **AVL, int cod_client); // Remove nó e Rebalanceia (se necessário) a Árvore
void removeFIRST(arvore **AVL); // Remove o nó que aponta para a raiz da Árvore
void freeNode(arvore **AVL); // Libera nó

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// FUNÇÕES DE ROTAÇÃO ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

void avl_rotation_LL (arvore **AVL); // Rotação Simples à Direita (a.k.a Left Left Rotation)
void avl_rotation_RR (arvore **AVL); // Rotação Simples à Esquerda (a.k.a Right Right Rotation)
void avl_rotation_LR (arvore **AVL); // Rotação Dupla à Direita (a.k.a Left Right Rotation)
void avl_rotation_RL (arvore **AVL); // Rotação Dupla à Esquerda (a.k.a Right Left Rotation)

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// FUNÇÕES DE BUSCA DE NÓS //////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

int avl_search_node(arvore *AVL, long long int value); // Procura nó e retorna resultado
int avl_height_node(arvore *AVL); // Retorna Altura do nó
int avl_fab(arvore *AVL); // Retorna Fator de balanceamento do nó

///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// FUNÇÕES GET ///////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

int getHeight(arvore *AVL); // Retorna altura do nó
int getCode(arvore *AVL); // Retorna codigo_cliente do nó
int getLevel(arvore *AVL); // Retorna nível do nó [Usado Somente em nó RAIZ da árvore e seu "pai"]
int getOp(arvore *AVL); // Retorna quantidade de operações do nó
long long int getSaldo(arvore *AVL); // Retorna saldo do nó
int getLowerCode(arvore *AVL); // Retorna codigo_cliente do menor nó
int getClients(arvore **AVL); // Retorna quantidade de clientes
arvore *getEsq(arvore *AVL); // Retorna nó à esquerda (fi_esq)
arvore *getDir(arvore *AVL); // Retorna nó à direita (fi_dir)
arvore* getFather(arvore *AVL); // Retorna nó pai


///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// FUNÇÕES AUXILIARES ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

int maior(int a, int b); // Retorna maior valor
void avl_parent_fix(arvore **AVL); // Atualiza os nós pais dos elementos da Árvore
arvore* avl_search_lower(arvore *AVL); // Retorna menor nó

#endif